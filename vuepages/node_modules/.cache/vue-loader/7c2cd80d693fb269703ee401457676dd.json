{"remainingRequest":"C:\\Users\\28353\\Desktop\\OJ-Demo\\vuepages\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\28353\\Desktop\\OJ-Demo\\vuepages\\src\\views\\Register.vue?vue&type=style&index=0&id=63ae9146&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\28353\\Desktop\\OJ-Demo\\vuepages\\src\\views\\Register.vue","mtime":1604039171824},{"path":"C:\\Users\\28353\\Desktop\\OJ-Demo\\vuepages\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\28353\\Desktop\\OJ-Demo\\vuepages\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\28353\\Desktop\\OJ-Demo\\vuepages\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\28353\\Desktop\\OJ-Demo\\vuepages\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\28353\\Desktop\\OJ-Demo\\vuepages\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNyZWdpc3RlciB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOwogICAgY29sb3I6ICMwMDAwMDA7CiAgICB3aWR0aDogMTAwJTsKICAgIGhlaWdodDogMzgwcHg7CiAgICBtYXJnaW46IDUlIGF1dG87Cn0KCi5yZWdpc3Rlci10aXRsZSB7CiAgICBmb250LXNpemU6IDMwcHg7CiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICBtYXJnaW4tYm90dG9tOiAxMHB4OwogICAgbWFyZ2luLXRvcDogNXB4Owp9CgouYWRkLWJvcmRlciB7CiAgICBib3JkZXI6IDFweCBzb2xpZCAjRENERkU2OwogICAgY29sb3I6ICM2MDYyNjY7CiAgICBoZWlnaHQ6IDQwcHg7CiAgICBsaW5lLWhlaWdodDogNDBweDsKICAgIHBhZGRpbmc6IDAgNXB4OwogICAgbWFyZ2luLXJpZ2h0OiAtMXB4Owp9CgouZWwtaW5wdXQtd2lkIHsKICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7CiAgICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogNHB4OwogICAgd2lkdGg6IDUwJTsKfQo="},{"version":3,"sources":["Register.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuMA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Register.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n    <div id=\"register\">\r\n        <div style=\"float: left;\">\r\n            <el-image\r\n                    style=\"width: 371px; height: 377px\"\r\n                    :src=\"sicnuUrl\">\r\n            </el-image>\r\n        </div>\r\n        <div style=\"float: left;\">\r\n            <p class=\"register-title\">欢迎注册</p>\r\n            <el-form :model=\"registerForm\" :rules=\"rules\" ref=\"registerForm\" label-width=\"50px\" class=\"demo-registerForm\">\r\n                <el-form-item prop=\"email\">\r\n                    <span class=\"add-border\" style=\"display: inline-block;\">\r\n                        <el-image\r\n                            :src=\"emailUrl\"\r\n                            style=\"width: 26px; height: 26px; vertical-align: middle;\">\r\n                        </el-image>\r\n                    </span>\r\n                    <el-input class=\"el-input-wid\" v-model=\"registerForm.email\" placeholder=\"请输入邮箱地址\" style=\"display: inline-block\" ></el-input>\r\n                </el-form-item>\r\n                <el-form-item prop=\"password1\">\r\n                    <el-input class=\"el-input-wid\" v-model=\"registerForm.password1\" placeholder=\"请输入登录密码\" type=\"password\"\r\n                              onpaste=\"return false\" oncontextmenu=\"return false\" oncopy=\"return false\" oncut=\"return false\">\r\n                    </el-input>\r\n                </el-form-item>\r\n                <el-form-item prop=\"password2\">\r\n                    <el-input class=\"el-input-wid\" v-model=\"registerForm.password2\" placeholder=\"请再次输入登录密码\" type=\"password\"\r\n                              onpaste=\"return false\" oncontextmenu=\"return false\" oncopy=\"return false\" oncut=\"return false\"></el-input>\r\n                </el-form-item>\r\n                <el-form-item prop=\"userInputVerifyCode\">\r\n                    <el-input class=\"el-input-wid\" v-model=\"registerForm.userInputVerifyCode\" placeholder=\"请输入验证码\"></el-input>\r\n                </el-form-item>\r\n\r\n                <el-form-item>\r\n                    <el-button type=\"primary\" @click=\"sendVerifyCode()\">发送验证码</el-button>\r\n                </el-form-item>\r\n\r\n\r\n                <el-form-item>\r\n                    <el-button type=\"primary\" @click=\"submitForm('registerForm')\">注册</el-button>\r\n                    <el-button @click=\"resetForm('registerForm')\">重置</el-button>\r\n                </el-form-item>\r\n\r\n            </el-form>\r\n        </div>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\r\n    // 验证邮箱正则\r\n    function isLegalEmail(email) {\r\n        const regEmail = /^[A-Za-z0-9\\u4e00-\\u9fa5]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$/;\r\n        return regEmail.test(email);\r\n    }\r\n\r\n    \r\n    // 验证密码(必须包含字母（不限大小写）和数字)\r\n    function isLegalPassword(password) {\r\n        let num = 0, letter = 0;\r\n        for(let i = 0; i < password.length; i ++) {\r\n            if(num && letter) return true;\r\n            else if(password[i] >= '0' && password[i] <= '9') num = 1;\r\n            else if(password[i] >= 'a' && password[i] <= 'z') letter = 1;\r\n            else if(password[i] >= 'A' && password[i] <= 'Z') letter = 1;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    export default {\r\n        data() {\r\n\r\n            // 验证邮箱格式是否合法\r\n            const validateEmail = (rule, value, callback) => {\r\n                if(!value) {\r\n                    callback(new Error(\"请输入邮箱地址\"));\r\n                } else if(!isLegalEmail(value)) {\r\n                    callback(new Error(\"邮箱格式不正确\"));\r\n                } else {\r\n                    callback();\r\n                }\r\n            };\r\n\r\n            /*\r\n             * 验证密码是否合法\r\n             * 1. 长度在 6 - 15 位之间\r\n             * 2. 必须包含字母（不限大小写）和数字\r\n             */\r\n            const validatePassword = (rule, value, callback) => {\r\n                if(!value) {\r\n                    callback(new Error(\"请输入登录密码\"));\r\n                } else {\r\n                    const len = value.length;\r\n                    console.log(len);\r\n                    if(len < 6 || len > 15) callback(new Error(\"密码长度在 6 - 15 位之间\"));\r\n                    else if(!isLegalPassword(value)) callback(new Error(\"密码必须包含字母和数字\"));\r\n                    else callback();\r\n                }\r\n            };\r\n\r\n            // 验证两次输入的密码是否相同\r\n            const validateIsSamePassword = (rule, value, callback) => {\r\n                if(!value) {\r\n                    callback(new Error(\"请再次输入密码\"));\r\n                } else if(value != this.registerForm.password1) {\r\n                    callback(new Error(\"两次输入的密码不一致\"));\r\n                } else callback();\r\n            };\r\n\r\n            // 验证验证码是否正确\r\n            const validateVerifyCode = (rule, value, callback) => {\r\n                if(this.registerForm.verifyCode == \"\") callback();\r\n                else if(!value || value != this.registerForm.verifyCode) callback(new Error(\"验证码错误\"));\r\n                else callback();\r\n            };\r\n\r\n            return {\r\n                registerForm: {\r\n                    email: \"\",\r\n                    password1: \"\",\r\n                    password2: \"\",\r\n                    verifyCode: \"\",\r\n                    userInputVerifyCode: \"\",\r\n                },\r\n                rules: {\r\n                    email: [{ trigger: \"blur\", validator: validateEmail }],\r\n                    password1: [{ trigger: \"blur\", validator: validatePassword }],\r\n                    password2: [{ trigger: \"blur\", validator: validateIsSamePassword }],\r\n                    userInputVerifyCode: [{ trigger: \"blur\", validator: validateVerifyCode }],\r\n                },\r\n                // 图片路径\r\n                sicnuUrl: require(\"../assets/imgs/sicnu.jpg\"),\r\n                emailUrl: require(\"../assets/imgs/email.svg\"),\r\n            };\r\n        },\r\n        methods: {\r\n            // 提交注册表单\r\n            submitForm(formName) {\r\n                this.$refs[formName].validate((valid) => {\r\n                    if (valid) {\r\n                        axios.post(this.global.registerUrl, this.$qs.stringify({\r\n                            \"email\":this.registerForm.email,\r\n                            \"password\":this.$md5(this.registerForm.password1)})).then((response) => {\r\n                            const res = response.data;\r\n                            if(res.status == 1) {\r\n                                // 注册成功\r\n                                this.$message({\r\n                                    message: \"注册成功！\",\r\n                                    type: \"success\"\r\n                                })\r\n                                this.$router.push(\"/user/login\");\r\n                            } else {\r\n                                this.$message({\r\n                                    showClose: true,\r\n                                    message: \"注册失败，该邮箱已被注册！\",\r\n                                    type: \"error\"\r\n                                })\r\n                            }\r\n                        })\r\n                    } else {\r\n                        console.log('error submit!!');\r\n                        return false;\r\n                    }\r\n                });\r\n            },\r\n            // 重置表单\r\n            resetForm(formName) {\r\n                this.$refs[formName].resetFields();\r\n            },\r\n            // 发送验证码到注册邮箱\r\n            sendVerifyCode() {\r\n                this.$refs.registerForm.validateField(\"email\", (emailError) => {\r\n                    if(!emailError) {\r\n                        axios.post(this.global.sendEmailUrl, this.$qs.stringify(\r\n                            {\"email\":this.registerForm.email})).then((response) => {\r\n                            const res = response.data;\r\n                            console.log(res);\r\n                            if(res.status == 1) {\r\n                                this.registerForm.verifyCode = res.data;\r\n                                this.$message({\r\n                                    message: \"验证码发送成功，请注意查收！\",\r\n                                    type: \"success\"\r\n                                })\r\n                            } else {\r\n                                this.$message({\r\n                                    message: \"验证码发送失败，请重试！\",\r\n                                    type: \"error\"\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n            },\r\n        },\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    #register {\r\n        background-color: #ffffff;\r\n        color: #000000;\r\n        width: 100%;\r\n        height: 380px;\r\n        margin: 5% auto;\r\n    }\r\n\r\n    .register-title {\r\n        font-size: 30px;\r\n        text-align: center;\r\n        margin-bottom: 10px;\r\n        margin-top: 5px;\r\n    }\r\n\r\n    .add-border {\r\n        border: 1px solid #DCDFE6;\r\n        color: #606266;\r\n        height: 40px;\r\n        line-height: 40px;\r\n        padding: 0 5px;\r\n        margin-right: -1px;\r\n    }\r\n\r\n    .el-input-wid {\r\n        border-top-left-radius: 0;\r\n        border-top-right-radius: 4px;\r\n        width: 50%;\r\n    }\r\n</style>"]}]}